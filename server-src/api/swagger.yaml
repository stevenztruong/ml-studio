---
swagger: "2.0"
info:
  description: "ML studio API"
  version: "1.0.0"
  title: "Swagger ML Studio"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "phu.truong@sjsu.edu"
basePath: "/v1"
tags:
- name: "models"
  description: "Everything about your Models"
- name: "users"
  description: "Users"
- name: "data"
  description: "Data for your models"
schemes:
- "https"
- "http"
paths:
  /data:
    post:
      tags:
      - "data"
      summary: "Upload data for model"
      description: ""
      operationId: "uploadData"
      consumes:
      - multipart/form-data
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: formData
        name: trainingData
        type: file
        required: false
        description: The file to upload.
      - in: formData
        name: classificationData
        type: file
        required: false
        description: The file to upload.
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      x-swagger-router-controller: "Models"
  /data/{fileName}:
    get:
      tags:
      - "data"
      summary: "download data for model"
      description: ""
      operationId: "downloadData"
      produces:
      - multipart/form-data
      parameters:
      - in: path
        name: fileName
        type: string
        required: true
        description: The file to upload.
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      x-swagger-router-controller: "Models"
  /models:
    get:
      tags:
      - "models"
      summary: "Retrieve all existing models for a user"
      description: ""
      operationId: "getModels"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      security:
      - user_auth:
        - "read:models"
      x-swagger-router-controller: "Models"
    post:
      tags:
      - "models"
      summary: "Create a new model and add to your account"
      description: ""
      operationId: "createModel"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Model object that needs to be added to the account"
        required: true
        schema:
          $ref: "#/definitions/Model"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "409":
          description: "Conflict (Model name exists)"
      security:
      - user_auth:
        - "write:models"
        - "read:models"
      x-swagger-router-controller: "Models"
  /models/{modelId}/training:
    post:
      tags:
      - "models"
      summary: "retrain a model"
      description: ""
      operationId: "trainModel"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Model object that needs to be retrain"
        required: true
        schema:
          $ref: "#/definitions/Model"
      - name: "modelId"
        in: "path"
        description: "ID of model to retrain"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
      security:
      - user_auth:
        - "write:models"
        - "read:models"
      x-swagger-router-controller: "Models"
  /models/{modelId}:
    get:
      tags:
      - "models"
      summary: "Find model by ID"
      description: "Returns a single model"
      operationId: "getModelById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Model not found"
      security:
      - user_auth:
        - "read:models"
      x-swagger-router-controller: "Models"
    put:
      tags:
      - "models"
      summary: "Updates a model"
      description: ""
      operationId: "updateModelById"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Model object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Model"
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Model not found"
      security:
      - user_auth:
        - "write:models"
        - "read:models"
      x-swagger-router-controller: "Models"
    delete:
      tags:
      - "models"
      summary: "Delete a model"
      description: ""
      operationId: "deleteModel"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "Model id to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Model not found"
      security:
      - user_auth:
        - "write:models"
        - "read:models"
      x-swagger-router-controller: "Models"
  /users:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "409":
          description: "user duplicate"
      x-swagger-router-controller: "Users"
  /login:
    get:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "header"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "header"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "Users"
  /logout:
    get:
      tags:
      - "users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "Users"
  /users/{username}:
    get:
      tags:
      - "users"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "Users"
securityDefinitions:
  user_auth:
    type: "oauth2"
    authorizationUrl: "https://temporary-login.com"
    flow: "implicit"
    scopes:
      write:models: "modify models in your account"
      read:models: "read your models"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      fullName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
    example:
      fullName: "firstName lastName"
      password: "password"
      email: "email@gmail.com"
      username: "username"
  Model:
    type: "object"
    required:
    - modelName
    properties:
      userId:
        type: integer
      modelName:
        type: "string"
        description: "Model's name"
      modelType:
        type: "string"
      params:
        type: "object"
        properties: {}
      trainingData:
        type: "string"
        description: "Model's traing data file's name"
      classificationData:
        type: "string"
        description: "Model's classification data file's name"
